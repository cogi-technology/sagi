syntax = "proto3";

package serviceszion;

option go_package = "example.com/project/protos/fizz";

// Services
message RegisterServiceRequest {
  string client_id = 1;
  string info = 2;
}

message GetAllServicesRequest {}
message GetAllServicesResponse {
  repeated InfoService data = 1;
}

message GetInfoServiceRequest {
  optional string id = 1;
  optional string client_id = 2;
}

message InfoService {
  string id = 1;
  string client_id = 2;
  string info = 3;
  string created_at = 4;
  string updated_at = 5;
}

// Services with NFT endpoints 
message GetAllNFTEndpointForServiceRequest {}
message GetAllNFTEndpointForServiceResponse {
  repeated NFTEndpointForService data = 1;
}

message GetInfoNFTEndpointForServiceRequest {
  optional string id = 1;
  optional string client_id = 2;
}

message NFTEndpointForService {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}

message ResgiterNFTEndpointForServiceRequest {
  string client_id = 1;
  string endpoint_url = 2;
}

message ResgiterNFTEndpointForServiceResponse {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}

message UnRegisterNFTEndpointForServiceRequest {
  string client_id = 1;
}

message UnRegisterNFTEndpointForServiceResponse {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}


message UpdateNFTEndpointForServiceRequest {
  string client_id = 1;
  string endpoint_url = 2;
}

message UpdateNFTEndpointForServiceeResponse {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}

// Services with Collections
message GetAllCollectionForServiceRequest {}
message GetAllCollectionForServiceResponse {
  repeated CollectionForService data = 1;
}

message GeInfoCollectionForServiceRequest {
  optional string id = 1;
  optional string client_id = 2;
}

message CollectionForService {
  string id = 1;
  string client_id = 2;
  string address = 3;
  string created_at = 4;
  string updated_at = 5;
}

message RegisterCollectionForServiceRequest {
  string client_id = 1;
  string address = 2;
  string namespace = 3;
  int32 start_block_number = 4;
}

message RegisterCollectionForServiceResponse {
  string id = 1;
  string client_id = 2;
  string address = 3;
  string namespace = 4;
  int32 start_block_number = 5;
  string created_at = 6;
  string updated_at = 7;
}

message UnRegisterCollectionForServiceRequest {
  string client_id = 1;
  string address = 2;
}

message UnRegisterCollectionForServiceResponse {
  string id = 1;
  string client_id = 2;
  string address = 3;
  int32 start_block_number = 4;
  string created_at = 5;
  string updated_at = 6;
}

message ResendNotiNFTEventsRequest {
  string id = 1;
}

message ResendNotiNFTEventsResponse {
  string id = 1;
  string status = 2;
}

message GetInfoNFTEventsRequest {
  optional string id = 1;
  optional string client_id = 2;
  optional string collection = 3;
  optional int32 token_id = 4;
}

message GetInfoNFTEventsResponse {
  repeated InfoEventNFT data = 1;
}

message InfoEventNFT {
  string id = 1;
  string tx = 2;
  string client_id = 3;
  string status = 4;
  string method = 5;
  string collection = 6;
  int32 token_id = 7;
  string created_at = 8;
  string updated_at = 9;
}

// Services with endpoints Token
message GetAllTokenEndpointForServiceRequest {}
message GetAllTokenEndpointForServiceResponse {
  repeated TokenEndpointForService data = 1;
}

message GetInfoTokenEndpointForServiceRequest {
  optional string id = 1;
  optional string client_id = 2;
}

message TokenEndpointForService {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string to_transfer = 4;
  string created_at = 5;
  string updated_at = 6;
}

message ResgiterTokenEndpointForServiceRequest {
  string client_id = 1;
  string endpoint_url = 2;
}

message ResgiterTokenEndpointForServiceResponse {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}

message UnRegisterTokenEndpointForServiceRequest {
  string client_id = 1;
}

message UnRegisterTokenEndpointForServiceResponse {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}


message UpdateTokenEndpointForServiceRequest {
  string client_id = 1;
  string endpoint_url = 2;
}

message UpdateTokenEndpointForServiceeResponse {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}

// Services with Tokens
message GetAllTokenForServiceRequest {}
message GetAllTokenForServiceResponse {
  repeated TokenForService data = 1;
}

message GeInfoTokenForServiceRequest {
  optional string id = 1;
  optional string client_id = 2;
}

message TokenForService {
  string id = 1;
  string client_id = 2;
  string address = 3;
  string created_at = 4;
  string updated_at = 5;
}

message RegisterTokenForServiceRequest {
  string client_id = 1;
  string address = 2;
  string namespace = 3;
  int32 start_block_number = 4;
}

message RegisterTokenForServiceResponse {
  string id = 1;
  string client_id = 2;
  string address = 3;
  string namespace = 4;
  int32 start_block_number = 5;
  string created_at = 6;
  string updated_at = 7;
}

message UnRegisterTokenForServiceRequest {
  string client_id = 1;
  string address = 2;
}

message UnRegisterTokenForServiceResponse {
  string id = 1;
  string client_id = 2;
  string address = 3;
  int32 start_block_number = 4;
  string created_at = 5;
  string updated_at = 6;
}

message ResendNotiTokenEventsRequest {
  string id = 1;
}

message ResendNotiTokenEventsResponse {
  string id = 1;
  string status = 2;
}

message GetInfoTokenEventsRequest {
  optional string id = 1;
  optional string client_id = 2;
  optional string Token = 3;
  optional int32 token_id = 4;
}

message GetInfoTokenEventsResponse {
  repeated InfoEventToken data = 1;
}

message InfoEventToken {
  string id = 1;
  string tx = 2;
  string client_id = 3;
  string status = 4;
  string method = 5;
  string Token = 6;
  float amount = 7;
  string created_at = 8;
  string updated_at = 9;
}

// Define the service for 
service ServicesZION {
  // Services
  rpc RegisterService (RegisterServiceRequest) returns (InfoService);
  rpc GetAllServices (GetAllServicesRequest) returns (GetAllServicesResponse);
  rpc GetInfoService (GetInfoServiceRequest) returns (InfoService);
    // Services with endpoints
  rpc GetAllNFTEndpointForService (GetAllNFTEndpointForServiceRequest) returns (GetAllNFTEndpointForServiceResponse);
  rpc GetInfoNFTEndpointForService (GetInfoNFTEndpointForServiceRequest) returns (NFTEndpointForService);
  rpc ResgiterNFTEndpointForService (ResgiterNFTEndpointForServiceRequest) returns (ResgiterNFTEndpointForServiceResponse);
  rpc UnRegisterNFTEndpointForService (UnRegisterNFTEndpointForServiceRequest) returns (UnRegisterNFTEndpointForServiceResponse);
  rpc UpdateNFTEndpointForService (UpdateNFTEndpointForServiceRequest) returns (UpdateNFTEndpointForServiceeResponse);
  // Services with Collections
  rpc GetAllCollectionForService (GetAllCollectionForServiceRequest) returns (GetAllCollectionForServiceResponse);
  rpc GetInfoCollectionForService (GeInfoCollectionForServiceRequest) returns (CollectionForService);
  rpc RegisterCollectionForService (RegisterCollectionForServiceRequest) returns (RegisterCollectionForServiceResponse);
  rpc UnRegisterCollectionForService (UnRegisterCollectionForServiceRequest) returns (UnRegisterCollectionForServiceResponse);
  // Resend Noti Events
  rpc GetInfoNFTEvents (GetInfoNFTEventsRequest) returns (GetInfoNFTEventsResponse);
  rpc ResendNotiNFTEvents (ResendNotiNFTEventsRequest) returns (ResendNotiNFTEventsResponse);
  // 
  // Services with endpoints
  rpc GetAllTokenEndpointForService (GetAllTokenEndpointForServiceRequest) returns (GetAllTokenEndpointForServiceResponse);
  rpc GetInfoTokenEndpointForService (GetInfoTokenEndpointForServiceRequest) returns (TokenEndpointForService);
  rpc ResgiterTokenEndpointForService (ResgiterTokenEndpointForServiceRequest) returns (ResgiterTokenEndpointForServiceResponse);
  rpc UnRegisterTokenEndpointForService (UnRegisterTokenEndpointForServiceRequest) returns (UnRegisterTokenEndpointForServiceResponse);
  rpc UpdateTokenEndpointForService (UpdateTokenEndpointForServiceRequest) returns (UpdateTokenEndpointForServiceeResponse);
  // Services with Tokens
  rpc GetAllTokenForService (GetAllTokenForServiceRequest) returns (GetAllTokenForServiceResponse);
  rpc GetInfoTokenForService (GeInfoTokenForServiceRequest) returns (TokenForService);
  rpc RegisterTokenForService (RegisterTokenForServiceRequest) returns (RegisterTokenForServiceResponse);
  rpc UnRegisterTokenForService (UnRegisterTokenForServiceRequest) returns (UnRegisterTokenForServiceResponse);
  // Resend Noti Events
  rpc GetInfoTokenEvents (GetInfoTokenEventsRequest) returns (GetInfoTokenEventsResponse);
  rpc ResendNotiTokenEvents (ResendNotiTokenEventsRequest) returns (ResendNotiTokenEventsResponse);
  // 
}
