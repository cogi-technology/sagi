syntax = "proto3";

package serviceszion;

option go_package = "example.com/project/protos/fizz";

// Services
message RegisterServiceRequest {
  string client_id = 1;
  string info = 2;
}

message GetAllServicesRequest {}
message GetAllServicesResponse {
  repeated InfoService lstServices = 1;
}

message GetInfoServiceRequest {
  optional string id = 1;
  optional string client_id = 2;
}

message InfoService {
  string id = 1;
  string client_id = 2;
  string info = 3;
  string created_at = 4;
  string updated_at = 5;
}

// Services with endpoints
message GetAllEndpointForServiceRequest {}
message GetAllEndpointForServiceResponse {
  repeated EndpointForService lst = 1;
}

message GetInfoEndpointForServiceRequest {
  optional string id = 1;
  optional string client_id = 2;
}

message EndpointForService {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}

message ResgiterEndpointForServiceRequest {
  string client_id = 1;
  string endpoint_url = 2;
}

message ResgiterEndpointForServiceResponse {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}

message UnRegisterEndpointForServiceRequest {
  string client_id = 1;
}

message UnRegisterEndpointForServiceResponse {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}

// Services with Collections
message GetAllCollectionForServiceRequest {}
message GetAllCollectionForServiceResponse {
  repeated CollectionForService lst = 1;
}

message GeInfoCollectionForServiceRequest {
  optional string id = 1;
  optional string client_id = 2;
}

message CollectionForService {
  string id = 1;
  string client_id = 2;
  string address = 3;
  string created_at = 4;
  string updated_at = 5;
}

message RegisterCollectionForServiceRequest {
  string client_id = 1;
  string address = 2;
}

message RegisterCollectionForServiceResponse {
  string id = 1;
  string client_id = 2;
  string address = 3;
  string created_at = 4;
  string updated_at = 5;
}

message UnRegisterCollectionForServiceRequest {
  string client_id = 1;
  string address = 2;
}

message UnRegisterCollectionForServiceResponse {
  string id = 1;
  string client_id = 2;
  string address = 3;
  string created_at = 4;
  string updated_at = 5;
}

// Test Endpoints
message TestSendToEndpointsRequest {
  string client_id = 1;
}

message TestSendToEndpointsResponse {
  string id = 1;
  string client_id = 2;
  string endpoint_url = 3;
  string created_at = 4;
  string updated_at = 5;
}

// Define the service for 
service ServicesZION {
  // Services
  rpc RegisterService (RegisterServiceRequest) returns (InfoService);
  rpc GetAllServices (GetAllServicesRequest) returns (GetAllServicesResponse);
  rpc GetInfoService (GetInfoServiceRequest) returns (InfoService);
    // Services with endpoints
  rpc GetAllEndpointForService (GetAllEndpointForServiceRequest) returns (GetAllEndpointForServiceResponse);
  rpc GetInfoEndpointForService (GetInfoEndpointForServiceRequest) returns (EndpointForService);
  rpc ResgiterEndpointForService (ResgiterEndpointForServiceRequest) returns (ResgiterEndpointForServiceResponse);
  rpc UnRegisterEndpointForService (UnRegisterEndpointForServiceRequest) returns (UnRegisterEndpointForServiceResponse);
  // Services with Collections
  rpc GetAllCollectionForService (GetAllCollectionForServiceRequest) returns (GetAllCollectionForServiceResponse);
  rpc GeInfoCollectionForService (GeInfoCollectionForServiceRequest) returns (CollectionForService);
  rpc RegisterCollectionForService (RegisterCollectionForServiceRequest) returns (RegisterCollectionForServiceResponse);
  rpc UnRegisterCollectionForService (UnRegisterCollectionForServiceRequest) returns (UnRegisterCollectionForServiceResponse);
  rpc TestSendToEndpoints (TestSendToEndpointsRequest) returns (TestSendToEndpointsResponse);
}
