syntax = "proto3";

package erc404;

option go_package = "example.com/project/protos/fizz";

// Define messages for the requests and responses for ERC404
message DeployRequest {
  string owner = 1;
  string name = 2;
  string symbol = 3;
  string initial_supply = 4;
  string units = 5;
  repeated string ids = 6;
  string uri = 7;
}

message DeployResponse {
  string contract = 1;
}

message TotalSupplyRequest {
  string contract = 1;
}

message TotalSupplyResponse {
  string totalSupply = 1;
}

message BalanceOfRequest {
  string contract = 1;
  string account = 2;
}

message BalanceOfResponse {
  string amount = 1;
}

message AllowanceRequest {
  string contract = 1;
  string owner = 2;
  string spender = 3;
}

message AllowanceResponse {
  string remainingAmount = 1;
}

message ApproveRequest {
  string contract = 1;
  string spender = 2;
  string amount = 3;
}

message ApproveResponse {
  string txhash = 1;
}

message TransferRequest {
  string contract = 1;
  string recipient = 2;
  string amount = 3;
}

message TransferResponse {
  string txhash = 1;
}

message TransferFromRequest {
  string contract = 1;
  string from = 2;
  string to = 3;
  string value = 4;
}

message TransferFromResponse {
  string txhash = 1;
}

message BalanceOfBatchRequest {
  string contract = 1;
  string owner = 2;
  repeated string token_ids = 3;
}

message BalanceOfBatchResponse {
  repeated string amounts = 1;
}

message SetApprovalForAllRequest {
  string contract = 1;
  string operator = 2;
  bool approved = 3;
}

message SetApprovalForAllResponse {
  string txhash = 1;
}

message IsApprovedForAllRequest {
  string contract = 1;
  string owner = 2;
  string operator = 3;
}

message IsApprovedForAllResponse {
  bool result = 1;
}

message SafeTransferFromRequest {
  string from = 1;
  string to = 2;
  string token_id = 3;
  string value = 4;
  string data = 5;
}

message SafeTransferFromResponse {
  string txhash = 1;
}

message SafeBatchTransferFromRequest {
  string from = 1;
  string to = 2;
  repeated string token_ids = 3;
  repeated string values = 4;
  string data = 5;
}

message SafeBatchTransferFromResponse {
  string txhash = 1;
}

message ERC1155BalanceOfRequest {
  string contract = 1;
  string account = 2;
  string token_id = 3;
}

message ERC1155BalanceOfResponse {
  string amount = 1;
}

message ERC20BalanceOfRequest {
  string contract = 1;
  string account = 2;
}

message ERC20BalanceOfResponse {
  string amount = 1;
}

message ERC1155TransferExemptRequest {
  string target = 1;
}

message ERC1155TransferExemptResponse {
  bool result = 1;
}

// Define the service for 
service ERC404 {
  rpc Deploy (DeployRequest) returns (DeployResponse);
  rpc TotalSupply (TotalSupplyRequest) returns (TotalSupplyResponse);
  rpc BalanceOf (BalanceOfRequest) returns (BalanceOfResponse);
  rpc Allowance (AllowanceRequest) returns (AllowanceResponse);
  rpc Approve (ApproveRequest) returns (ApproveResponse);
  rpc Transfer (TransferRequest) returns (TransferResponse);
  rpc TransferFrom (TransferFromRequest) returns (TransferFromResponse);
  rpc BalanceOfBatch (BalanceOfBatchRequest) returns (BalanceOfBatchResponse);
  rpc SetApprovalForAll (SetApprovalForAllRequest) returns (SetApprovalForAllResponse);
  rpc IsApprovedForAll (IsApprovedForAllRequest) returns (IsApprovedForAllResponse);
  rpc SafeTransferFrom (SafeTransferFromRequest) returns (SafeTransferFromResponse);
  rpc SafeBatchTransferFrom (SafeBatchTransferFromRequest) returns (SafeBatchTransferFromResponse);
  rpc ERC1155BalanceOf (ERC1155BalanceOfRequest) returns (ERC1155BalanceOfResponse);
  rpc ERC20BalanceOf (ERC20BalanceOfRequest) returns (ERC20BalanceOfResponse);
  rpc ERC1155TransferExempt (ERC1155TransferExemptRequest) returns (ERC1155TransferExemptResponse);
}
